[자바란?]
1. AWS를 이용할꺼면 Amazon Corrretto 에서 구현한 java 를 쓰자.
2. 오 .? 인텔리제이로 .java 가 .class 로 컴파일 된걸 볼 수 있다. 이때는 주석은 사라져서 보인다. 원래는 .class 바이트코드로 되어있지만. 사람이 보기 편하게 인텔리 제이에서 제공해줌
3. java는 운영체제에 독립적 
  3-1. 아 ! 로컬에서 자바로 개발 .. 컴파일러로 .class 파일을 만들어서 ... 서버(리눅스환경)에 자바 설치하고 배포하면 되는구나..

[변수 선언과 초기화]
1. 일단 선언하면 메모리 공간을 확보
2. 여러 변수 선언과 초기화를 한번에 가능 int a = 1, b = 3; ,, ㅎㅎ;;
3. 변수는 꼭 초기화를 시켜줘야한다.
  3-1. 지역변수는 직접 초기화 시켜줘야하지만. 클래스변수와 인스턴스변수는 자바가 자동으로 초기화를 해줌
  3-2. 초기화가 안된 변수는 자바가 컴파일단계에서 삭제시킴..!?

[변수타입]
1. int와 floate 는 4바이트 까지 표현가능
2. boolean 은 1바이트이다 ! 

[변수 명명 규칙 및 관례]
1. 변수 숫자이름 시작 불가 ,공백, 예약어 금지
2. 소문자 시작 + camel case
3. 상수의 경우 대문자 + "_" 이용
4. 패키지는 모두 소문자 사용

[스코프]
1. 변수는 선언위치에따라 지역변수, 멤버변수(클래스 변수, 인스턴스 변수)
  1-1. 지역 변수의 생존 범위 == {}
2. 스코프의 존재 이유..
  2-1. 비효율적인 메모리 사용 방지, 코드 복잡성 증가 방지.
3. 좋은 프로그램은 무한한 자유가 있는 프로그램이 아니라 적절한 제약이 있는 프로그램이다.

[형변환]
1. long -> double 의 경우에도 double은 부동 소수점을 사용 하기 때문에 더 큰 숫자 범위를 표현한다. 따라서 대입 가능,
2. 명시적 형변환의 경우 .. 컴파일은 되지만 데이터 손실은 감수해야한다.
  2-1. 형변환을 한다고 해서 원본 자체의 타입이 변경 되거나 그 안에 있는 값이 변경 되는 것은 아님 ...
3. 명시적 형변환의 오버플로우... long -> int로 명시적 형변환 했는데 int 의 범위를 넘어간 값이라면... int의 가장 큰값 ~> 가장 작은값으로 점점 증가로 다시 순회..
  3-1. 오버플로우가... 발생하는 것 자체가 문제가인거야!
4. 형변환 계산 기본 숫자는 int형임... ! double x = 3/2  해봤자 인트 인트나눈것...!

[배열]
1. 배열의 생성과 초기화
  1-1. int[] a = new int[]{1,2,3}  == int[] a ={1,2,3}
  1-2. 2차원 배열의 초기화 int[][] b = {{1,2,3},{4,5,6}} , b.length 는 행의 길이, b[i].lengh는 열의 길이 

